<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div>
        <video mute autoplay hidden></video>
        <canvas></canvas>
    </div>
    <div>
        <button id="get-access">Start Camera</button>
        <button id="stop-access">Stop Camera</button>
    </div>
    <div>
        <span>Barcode data: </span><span id="bcData"></span>
    </div>
    
    
    <script src="https://cdn.jsdelivr.net/npm/@undecaf/zbar-wasm@0.9.15/dist/index.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@undecaf/barcode-detector-polyfill@0.9.21/dist/index.js"></script>
    <script>
        let stream = null;
        let bcAnimate = null;
        let sWidth = 500
        let sHeight = 500


        document.querySelector('#get-access').addEventListener('click', async (e)=>{
            try {
                stream = await navigator.mediaDevices.getUserMedia({
                    audio: false,
                    video: { facingMode: "environment", width: sWidth, height: sHeight }
                })
                let video = document.querySelector('video');
                video.srcObject = stream;

                window['BarcodeDetector'] = barcodeDetectorPolyfill.BarcodeDetectorPolyfill

                const getFormats = await BarcodeDetector.getSupportedFormats();

                const detector = new BarcodeDetector({formats: getFormats })

                let canvas = document.querySelector('canvas');
                
                canvas.width = sWidth;
                canvas.height = sHeight;
                let ctx = canvas.getContext('2d');

                async function bcLoop(){
                    ctx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);

                    const barcodes = await detector.detect(document.querySelector('video'));
                    if(barcodes.length){
                        document.querySelector('#bcData').textContent = barcodes[0].rawValue;
                    }
                    bcAnimate = requestAnimationFrame(bcLoop);
                }
                
                bcAnimate = requestAnimationFrame(bcLoop)
                

            }
            catch(err){
                console.log(err);
            }
        });

        document.querySelector('#stop-access').addEventListener('click', async (e)=>{
            if(stream && bcAnimate){
                stream.getTracks().forEach((track)=>{
                    if (track.readyState == 'live') {
                        track.stop();
                    }
                })
                cancelAnimationFrame(bcAnimate);
            }
        })
    </script>
</body>
</html>
